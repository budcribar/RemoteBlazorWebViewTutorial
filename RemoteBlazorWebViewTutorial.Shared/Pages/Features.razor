@page "/features" 
@using System.Diagnostics
@using System.IO 
@implements IAsyncDisposable
@inject IJSRuntime jsRuntime

<h3>Features</h3>

<ul style="margin-bottom:10px">
    <li >
        <input type="text" @bind="message" />
         <button @onclick="ShowAlert">Invoke JS Alert Method</button>
	</li>
    <li>
        <button @onclick="ReadJSStream">Read from JS Stream</button>
	</li>
     <li>
        <button @onclick="InvokeDotNet">Increment From DotNet</button>
        @counter
	</li>

    <li>
        <button @onclick="DynamicJavascriptImport">DynamicJavascriptImport</button>
        @counter
    </li>
</ul>


@if(Busy)
{
    <div class="spinner"></div>
}
@if (done)
{
    <div >Transfer rate is @mbps.ToString("F2") MB/sec</div>
    <div >File transfer succeeded: @passed</div>
}

@code {
    string message = string.Empty;
    bool Busy { get; set; } = false;
    bool done = false;
    double mbps = 0.0;
    bool passed = true;
    static int counter = 0;
    private Task<IJSObjectReference>? _module;
    private IJSObjectReference? module = default!;
    static Features features = default!;

    [JSInvokable]
    public static Task Increment()
    {
        counter++;
        features.StateHasChanged();
        return Task.CompletedTask;
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    features = this;
    //    if (firstRender)
    //    {
    //        module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "/_content/DynamicLoad.js");
    //    }
    //}

    private async Task DynamicJavascriptImport()
    {
        counter  = await module!.InvokeAsync<int>("decrementNumber", new object[] { counter });
        StateHasChanged();
    }

    private void InvokeDotNet() {
        jsRuntime.InvokeVoidAsync("increment");
        //await Task.Delay(1000);
        StateHasChanged();
    }


    private async void ReadJSStream()
    {
        Busy = true;
        done = false;
        StateHasChanged();

        var outputPath = Path.Combine(Path.GetTempPath(), "file.txt");
        using var outputFileStream = File.OpenWrite(outputPath);

        Stopwatch sw = new();
        sw.Start();
        var dataReference = await jsRuntime.InvokeAsync<IJSStreamReference>("jsToDotNetStreamReturnValue");
        using var dataReferenceStream = await dataReference.OpenReadStreamAsync(maxAllowedSize: 10_000_000);
        // Write JS Stream to disk
        await dataReferenceStream.CopyToAsync(outputFileStream);
        outputFileStream.Close();

        mbps = 10.0 / sw.Elapsed.TotalSeconds;
        Busy = false;
        done = true;
        StateHasChanged();

        var bytes = File.ReadAllBytes(outputPath);

        for (int i = 0; i < bytes.Length; i++)
            if (bytes[i] != i % 256)
                passed = false;

        StateHasChanged();
    }

    private async void ShowAlert()
    {

        if(_module != null)
        {
            (await _module)?.InvokeVoidAsync("sayHi", message);
        }    
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        features = this;
        await base.OnAfterRenderAsync(firstRender);

        var type = this.GetType();
        var path = $"./_content/{type.FullName?.Substring(0, type.Module.Name.Length - 4) + type.FullName?.Replace('.', '/').Substring(type.Module.Name.Length - 4)}.razor.js";

        var moduleName = type.Module.Name.Substring(0, type.Module.Name.Length - 4);
        if (firstRender)
        {
            _module = jsRuntime.InvokeAsync<IJSObjectReference>("import", path).AsTask();
            module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", $"./_content/{moduleName}/DynamicLoad.js");
        }
        
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }
}
